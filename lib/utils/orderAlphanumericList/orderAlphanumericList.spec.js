"use strict";var _orderAlphanumericList=require("./orderAlphanumericList"),listUnordered=[{id:4,strng:"b",nmber:5},{id:5,strng:"c",nmber:0},{id:1,strng:"a",nmber:1},{id:3,strng:"b",nmber:15},{id:2,strng:"a",nmber:-1}],listDescExpected=[{id:1,strng:"a",nmber:1},{id:2,strng:"a",nmber:-1},{id:3,strng:"b",nmber:15},{id:4,strng:"b",nmber:5},{id:5,strng:"c",nmber:0}],listAscExpected=[{id:2,strng:"a",nmber:-1},{id:1,strng:"a",nmber:1},{id:4,strng:"b",nmber:5},{id:3,strng:"b",nmber:15},{id:5,strng:"c",nmber:0}],listOrderStringOnly=[{id:1,strng:"a",nmber:1},{id:2,strng:"a",nmber:-1},{id:4,strng:"b",nmber:5},{id:3,strng:"b",nmber:15},{id:5,strng:"c",nmber:0}];describe("Order list by strng and nmber, order desc as default",function(){it("it is verified that it returns a list ordered by: stringKey, and numberKey, in descendant order",function(){var a=(0,_orderAlphanumericList.orderAlphanumericList)({list:listUnordered,stringKey:"strng",numberKey:"nmber"});expect(a[2]).toEqual(listDescExpected[2]),expect(a[1]).not.toEqual(listDescExpected[4]),expect(a).toEqual(expect.arrayContaining(listDescExpected))})}),describe("Order list by strng and nmber, order asc via prop",function(){it("it is verified that it returns a list ordered by: stringKey, and numberKey, in ascendant order",function(){var a=(0,_orderAlphanumericList.orderAlphanumericList)({list:listUnordered,stringKey:"strng",numberKey:"nmber",numericOrder:"asc"});expect(a[2]).toEqual(listAscExpected[2]),expect(a[1]).not.toEqual(listAscExpected[4]),expect(a).toEqual(expect.arrayContaining(listAscExpected))})}),describe("Order list by strng only",function(){it("it is verified that it returns a list ordered by: stringKey",function(){var a=(0,_orderAlphanumericList.orderAlphanumericList)({list:listUnordered,stringKey:"strng"});expect(a[2]).toEqual(listOrderStringOnly[2]),expect(a[1]).not.toEqual(listOrderStringOnly[4]),expect(a).toEqual(expect.arrayContaining(listOrderStringOnly))})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsaXN0VW5vcmRlcmVkIiwiaWQiLCJzdHJuZyIsIm5tYmVyIiwibGlzdERlc2NFeHBlY3RlZCIsImxpc3RBc2NFeHBlY3RlZCIsImxpc3RPcmRlclN0cmluZ09ubHkiLCJkZXNjcmliZSIsIml0IiwicmVzdWx0Iiwib3JkZXJBbHBoYW51bWVyaWNMaXN0IiwibGlzdCIsInN0cmluZ0tleSIsIm51bWJlcktleSIsImV4cGVjdCIsInRvRXF1YWwiLCJub3QiLCJhcnJheUNvbnRhaW5pbmciLCJudW1lcmljT3JkZXIiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvb3JkZXJBbHBoYW51bWVyaWNMaXN0L29yZGVyQWxwaGFudW1lcmljTGlzdC5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9yZGVyQWxwaGFudW1lcmljTGlzdCB9IGZyb20gJy4vb3JkZXJBbHBoYW51bWVyaWNMaXN0J1xuXG5jb25zdCBsaXN0VW5vcmRlcmVkID0gW1xuICB7IGlkOiA0LCBzdHJuZzogJ2InLCBubWJlcjogNSB9LFxuICB7IGlkOiA1LCBzdHJuZzogJ2MnLCBubWJlcjogMCB9LFxuICB7IGlkOiAxLCBzdHJuZzogJ2EnLCBubWJlcjogMSB9LFxuICB7IGlkOiAzLCBzdHJuZzogJ2InLCBubWJlcjogMTUgfSxcbiAgeyBpZDogMiwgc3Rybmc6ICdhJywgbm1iZXI6IC0xIH0sXG5dXG5jb25zdCBsaXN0RGVzY0V4cGVjdGVkID0gW1xuICB7IGlkOiAxLCBzdHJuZzogJ2EnLCBubWJlcjogMSB9LFxuICB7IGlkOiAyLCBzdHJuZzogJ2EnLCBubWJlcjogLTEgfSxcbiAgeyBpZDogMywgc3Rybmc6ICdiJywgbm1iZXI6IDE1IH0sXG4gIHsgaWQ6IDQsIHN0cm5nOiAnYicsIG5tYmVyOiA1IH0sXG4gIHsgaWQ6IDUsIHN0cm5nOiAnYycsIG5tYmVyOiAwIH0sXG5dXG5jb25zdCBsaXN0QXNjRXhwZWN0ZWQgPSBbXG4gIHsgaWQ6IDIsIHN0cm5nOiAnYScsIG5tYmVyOiAtMSB9LFxuICB7IGlkOiAxLCBzdHJuZzogJ2EnLCBubWJlcjogMSB9LFxuICB7IGlkOiA0LCBzdHJuZzogJ2InLCBubWJlcjogNSB9LFxuICB7IGlkOiAzLCBzdHJuZzogJ2InLCBubWJlcjogMTUgfSxcbiAgeyBpZDogNSwgc3Rybmc6ICdjJywgbm1iZXI6IDAgfSxcbl1cblxuY29uc3QgbGlzdE9yZGVyU3RyaW5nT25seSA9IFtcbiAgICB7IGlkOiAxLCBzdHJuZzogJ2EnLCBubWJlcjogMSB9LFxuICAgIHsgaWQ6IDIsIHN0cm5nOiAnYScsIG5tYmVyOiAtMSB9LFxuICAgIHsgaWQ6IDQsIHN0cm5nOiAnYicsIG5tYmVyOiA1IH0sXG4gICAgeyBpZDogMywgc3Rybmc6ICdiJywgbm1iZXI6IDE1IH0sXG4gICAgeyBpZDogNSwgc3Rybmc6ICdjJywgbm1iZXI6IDAgfSxcbiAgXVxuXG5kZXNjcmliZSgnT3JkZXIgbGlzdCBieSBzdHJuZyBhbmQgbm1iZXIsIG9yZGVyIGRlc2MgYXMgZGVmYXVsdCcsICgpID0+IHtcbiAgaXQoJ2l0IGlzIHZlcmlmaWVkIHRoYXQgaXQgcmV0dXJucyBhIGxpc3Qgb3JkZXJlZCBieTogc3RyaW5nS2V5LCBhbmQgbnVtYmVyS2V5LCBpbiBkZXNjZW5kYW50IG9yZGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG9yZGVyQWxwaGFudW1lcmljTGlzdCh7IGxpc3Q6IGxpc3RVbm9yZGVyZWQsIHN0cmluZ0tleTogJ3N0cm5nJywgbnVtYmVyS2V5OiAnbm1iZXInIH0pXG4gICAgZXhwZWN0KHJlc3VsdFsyXSkudG9FcXVhbChsaXN0RGVzY0V4cGVjdGVkWzJdKVxuICAgIGV4cGVjdChyZXN1bHRbMV0pLm5vdC50b0VxdWFsKGxpc3REZXNjRXhwZWN0ZWRbNF0pXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChleHBlY3QuYXJyYXlDb250YWluaW5nKGxpc3REZXNjRXhwZWN0ZWQpKVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ09yZGVyIGxpc3QgYnkgc3RybmcgYW5kIG5tYmVyLCBvcmRlciBhc2MgdmlhIHByb3AnLCAoKSA9PiB7XG4gIGl0KCdpdCBpcyB2ZXJpZmllZCB0aGF0IGl0IHJldHVybnMgYSBsaXN0IG9yZGVyZWQgYnk6IHN0cmluZ0tleSwgYW5kIG51bWJlcktleSwgaW4gYXNjZW5kYW50IG9yZGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG9yZGVyQWxwaGFudW1lcmljTGlzdCh7XG4gICAgICBsaXN0OiBsaXN0VW5vcmRlcmVkLFxuICAgICAgc3RyaW5nS2V5OiAnc3RybmcnLFxuICAgICAgbnVtYmVyS2V5OiAnbm1iZXInLFxuICAgICAgbnVtZXJpY09yZGVyOiAnYXNjJyxcbiAgICB9KVxuICAgIGV4cGVjdChyZXN1bHRbMl0pLnRvRXF1YWwobGlzdEFzY0V4cGVjdGVkWzJdKVxuICAgIGV4cGVjdChyZXN1bHRbMV0pLm5vdC50b0VxdWFsKGxpc3RBc2NFeHBlY3RlZFs0XSlcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGV4cGVjdC5hcnJheUNvbnRhaW5pbmcobGlzdEFzY0V4cGVjdGVkKSlcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdPcmRlciBsaXN0IGJ5IHN0cm5nIG9ubHknLCAoKSA9PiB7XG4gIGl0KCdpdCBpcyB2ZXJpZmllZCB0aGF0IGl0IHJldHVybnMgYSBsaXN0IG9yZGVyZWQgYnk6IHN0cmluZ0tleScsICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBvcmRlckFscGhhbnVtZXJpY0xpc3Qoe1xuICAgICAgbGlzdDogbGlzdFVub3JkZXJlZCxcbiAgICAgIHN0cmluZ0tleTogJ3N0cm5nJyxcbiAgICB9KVxuICAgIGV4cGVjdChyZXN1bHRbMl0pLnRvRXF1YWwobGlzdE9yZGVyU3RyaW5nT25seVsyXSlcbiAgICBleHBlY3QocmVzdWx0WzFdKS5ub3QudG9FcXVhbChsaXN0T3JkZXJTdHJpbmdPbmx5WzRdKVxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoZXhwZWN0LmFycmF5Q29udGFpbmluZyhsaXN0T3JkZXJTdHJpbmdPbmx5KSlcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiIyRUFFTUEsYUFBYSxDQUFHLENBQ3BCLENBQUVDLEVBQUUsQ0FBRSxDQUFDLENBQUVDLEtBQUssQ0FBRSxHQUFHLENBQUVDLEtBQUssQ0FBRSxDQUFFLENBQUMsQ0FDL0IsQ0FBRUYsRUFBRSxDQUFFLENBQUMsQ0FBRUMsS0FBSyxDQUFFLEdBQUcsQ0FBRUMsS0FBSyxDQUFFLENBQUUsQ0FBQyxDQUMvQixDQUFFRixFQUFFLENBQUUsQ0FBQyxDQUFFQyxLQUFLLENBQUUsR0FBRyxDQUFFQyxLQUFLLENBQUUsQ0FBRSxDQUFDLENBQy9CLENBQUVGLEVBQUUsQ0FBRSxDQUFDLENBQUVDLEtBQUssQ0FBRSxHQUFHLENBQUVDLEtBQUssQ0FBRSxFQUFHLENBQUMsQ0FDaEMsQ0FBRUYsRUFBRSxDQUFFLENBQUMsQ0FBRUMsS0FBSyxDQUFFLEdBQUcsQ0FBRUMsS0FBSyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQ2pDLENBQ0tDLGdCQUFnQixDQUFHLENBQ3ZCLENBQUVILEVBQUUsQ0FBRSxDQUFDLENBQUVDLEtBQUssQ0FBRSxHQUFHLENBQUVDLEtBQUssQ0FBRSxDQUFFLENBQUMsQ0FDL0IsQ0FBRUYsRUFBRSxDQUFFLENBQUMsQ0FBRUMsS0FBSyxDQUFFLEdBQUcsQ0FBRUMsS0FBSyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQ2hDLENBQUVGLEVBQUUsQ0FBRSxDQUFDLENBQUVDLEtBQUssQ0FBRSxHQUFHLENBQUVDLEtBQUssQ0FBRSxFQUFHLENBQUMsQ0FDaEMsQ0FBRUYsRUFBRSxDQUFFLENBQUMsQ0FBRUMsS0FBSyxDQUFFLEdBQUcsQ0FBRUMsS0FBSyxDQUFFLENBQUUsQ0FBQyxDQUMvQixDQUFFRixFQUFFLENBQUUsQ0FBQyxDQUFFQyxLQUFLLENBQUUsR0FBRyxDQUFFQyxLQUFLLENBQUUsQ0FBRSxDQUFDLENBQ2hDLENBQ0tFLGVBQWUsQ0FBRyxDQUN0QixDQUFFSixFQUFFLENBQUUsQ0FBQyxDQUFFQyxLQUFLLENBQUUsR0FBRyxDQUFFQyxLQUFLLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FDaEMsQ0FBRUYsRUFBRSxDQUFFLENBQUMsQ0FBRUMsS0FBSyxDQUFFLEdBQUcsQ0FBRUMsS0FBSyxDQUFFLENBQUUsQ0FBQyxDQUMvQixDQUFFRixFQUFFLENBQUUsQ0FBQyxDQUFFQyxLQUFLLENBQUUsR0FBRyxDQUFFQyxLQUFLLENBQUUsQ0FBRSxDQUFDLENBQy9CLENBQUVGLEVBQUUsQ0FBRSxDQUFDLENBQUVDLEtBQUssQ0FBRSxHQUFHLENBQUVDLEtBQUssQ0FBRSxFQUFHLENBQUMsQ0FDaEMsQ0FBRUYsRUFBRSxDQUFFLENBQUMsQ0FBRUMsS0FBSyxDQUFFLEdBQUcsQ0FBRUMsS0FBSyxDQUFFLENBQUUsQ0FBQyxDQUNoQyxDQUVLRyxtQkFBbUIsQ0FBRyxDQUN4QixDQUFFTCxFQUFFLENBQUUsQ0FBQyxDQUFFQyxLQUFLLENBQUUsR0FBRyxDQUFFQyxLQUFLLENBQUUsQ0FBRSxDQUFDLENBQy9CLENBQUVGLEVBQUUsQ0FBRSxDQUFDLENBQUVDLEtBQUssQ0FBRSxHQUFHLENBQUVDLEtBQUssQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUNoQyxDQUFFRixFQUFFLENBQUUsQ0FBQyxDQUFFQyxLQUFLLENBQUUsR0FBRyxDQUFFQyxLQUFLLENBQUUsQ0FBRSxDQUFDLENBQy9CLENBQUVGLEVBQUUsQ0FBRSxDQUFDLENBQUVDLEtBQUssQ0FBRSxHQUFHLENBQUVDLEtBQUssQ0FBRSxFQUFHLENBQUMsQ0FDaEMsQ0FBRUYsRUFBRSxDQUFFLENBQUMsQ0FBRUMsS0FBSyxDQUFFLEdBQUcsQ0FBRUMsS0FBSyxDQUFFLENBQUUsQ0FBQyxDQUNoQyxDQUVISSxRQUFRLENBQUMsc0RBQXNELENBQUUsVUFBTSxDQUNyRUMsRUFBRSxDQUFDLGlHQUFpRyxDQUFFLFVBQU0sQ0FDMUcsR0FBTUMsRUFBTSxDQUFHLEdBQUFDLDRDQUFxQixFQUFDLENBQUVDLElBQUksQ0FBRVgsYUFBYSxDQUFFWSxTQUFTLENBQUUsT0FBTyxDQUFFQyxTQUFTLENBQUUsT0FBUSxDQUFDLENBQUMsQ0FDckdDLE1BQU0sQ0FBQ0wsQ0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNNLE9BQU8sQ0FBQ1gsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDOUNVLE1BQU0sQ0FBQ0wsQ0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNPLEdBQUcsQ0FBQ0QsT0FBTyxDQUFDWCxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNsRFUsTUFBTSxDQUFDTCxDQUFNLENBQUMsQ0FBQ00sT0FBTyxDQUFDRCxNQUFNLENBQUNHLGVBQWUsQ0FBQ2IsZ0JBQWdCLENBQUMsQ0FDakUsQ0FBQyxDQUNILENBQUMsQ0FBQyxDQUVGRyxRQUFRLENBQUMsbURBQW1ELENBQUUsVUFBTSxDQUNsRUMsRUFBRSxDQUFDLGdHQUFnRyxDQUFFLFVBQU0sQ0FDekcsR0FBTUMsRUFBTSxDQUFHLEdBQUFDLDRDQUFxQixFQUFDLENBQ25DQyxJQUFJLENBQUVYLGFBQWEsQ0FDbkJZLFNBQVMsQ0FBRSxPQUFPLENBQ2xCQyxTQUFTLENBQUUsT0FBTyxDQUNsQkssWUFBWSxDQUFFLEtBQ2hCLENBQUMsQ0FBQyxDQUNGSixNQUFNLENBQUNMLENBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDTSxPQUFPLENBQUNWLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM3Q1MsTUFBTSxDQUFDTCxDQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ08sR0FBRyxDQUFDRCxPQUFPLENBQUNWLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNqRFMsTUFBTSxDQUFDTCxDQUFNLENBQUMsQ0FBQ00sT0FBTyxDQUFDRCxNQUFNLENBQUNHLGVBQWUsQ0FBQ1osZUFBZSxDQUFDLENBQ2hFLENBQUMsQ0FDSCxDQUFDLENBQUMsQ0FFRkUsUUFBUSxDQUFDLDBCQUEwQixDQUFFLFVBQU0sQ0FDekNDLEVBQUUsQ0FBQyw2REFBNkQsQ0FBRSxVQUFNLENBQ3RFLEdBQU1DLEVBQU0sQ0FBRyxHQUFBQyw0Q0FBcUIsRUFBQyxDQUNuQ0MsSUFBSSxDQUFFWCxhQUFhLENBQ25CWSxTQUFTLENBQUUsT0FDYixDQUFDLENBQUMsQ0FDRkUsTUFBTSxDQUFDTCxDQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ00sT0FBTyxDQUFDVCxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNqRFEsTUFBTSxDQUFDTCxDQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ08sR0FBRyxDQUFDRCxPQUFPLENBQUNULG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3JEUSxNQUFNLENBQUNMLENBQU0sQ0FBQyxDQUFDTSxPQUFPLENBQUNELE1BQU0sQ0FBQ0csZUFBZSxDQUFDWCxtQkFBbUIsQ0FBQyxDQUNwRSxDQUFDLENBQ0gsQ0FBQyxDQUFDIn0=