"use strict";var _formatNumber=require("./formatNumber"),numA=1.23456789,numAUp=1.2367,numB=1005000.4942,comma=",",dot=".";describe("setDecimals util should return fixed decimals with the amount passed as prop",function(){it("it is verified than passing a number with decimals and prop decimals as 2, should return a string with 2 decimals",function(){var a=(0,_formatNumber.setDecimals)(numA,2);expect(a).toBe("1,23");var b=(0,_formatNumber.setDecimals)(numAUp,2);expect(b).toBe("1,24")}),it("it is verified than passing a number with decimals and prop decimals as 3, should return a string with 3 decimals",function(){var a=(0,_formatNumber.setDecimals)(numA,3);expect(a).toBe("1,235");var b=(0,_formatNumber.setDecimals)(numAUp,3);expect(b).toBe("1,237")}),it("it is verified than passing a number higher than one thousand should return a string with the passed decimal/thousand scale as prop",function(){var a=(0,_formatNumber.setDecimals)(numB,2);expect(a).toBe("1.005.000,49");var b=(0,_formatNumber.setDecimals)(numB,2,dot);expect(b).toBe("1.005.000,49");var c=(0,_formatNumber.setDecimals)(numB,2,dot,comma);expect(c).toBe("1.005.000,49")})}),describe("thousandsSeparators util should return a string with thousand and decimal scale passed as prop",function(){it("it is verified than passing a number higher than one thousand should return a string with thousandSeparator",function(){var a=(0,_formatNumber.thousandsSeparators)(numB);expect(a).toBe("1.005.000,4942");var b=(0,_formatNumber.thousandsSeparators)(numB,dot);expect(b).toBe("1.005.000,4942");var c=(0,_formatNumber.thousandsSeparators)(numB,dot,comma);expect(c).toBe("1.005.000,4942")})}),describe("addZeros util should return a string if the number passed is a integer",function(){it("it is verified than passing a integer should return two zeros with the decimal scale passed as prop",function(){var a=(0,_formatNumber.addZeros)(1e3);expect(a).toBe(",00");var b=(0,_formatNumber.addZeros)(1e3,dot);expect(b).toBe(".00");var c=(0,_formatNumber.addZeros)(1000.92,dot);expect(c).toBeFalsy();var d=(0,_formatNumber.addZeros)(1e3,comma);expect(d).toBe(",00");var e=(0,_formatNumber.addZeros)(1000.92,comma);expect(e).toBeFalsy()})}),describe("formatNumber util should return a string with a given denomination correspondigly to the amount of zeros",function(){it("it is verified that passing a number greater than a thousand will return a string converted",function(){var a=(0,_formatNumber.formatNumber)(numB);expect(a).toBe("1,0 M");var b=(0,_formatNumber.formatNumber)(2e3);expect(b).toBe("2 K")}),it("it is verified that passing a number greater than a thousand, and decimals as prop, will return a string converted, with the amount of decimals passed",function(){var a=(0,_formatNumber.formatNumber)(numB,3);expect(a).toBe("1,005 M")})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,