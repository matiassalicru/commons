"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_regenerator=_interopRequireDefault(require("@babel/runtime/regenerator")),_asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_objectDestructuringEmpty2=_interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty")),_extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends")),_pure=require("@testing-library/react/pure"),_react=require("@testing-library/react"),_colors=_interopRequireDefault(require("@projectcor/theme/lib/base/colors")),_ProgressBar=require("./ProgressBar"),_jsxRuntime=require("react/jsx-runtime");function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach(function(c){(0,_defineProperty2.default)(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}var componentProps={chargeBarContent:"chargeBar",suggestedBarContent:"suggestedBar",title:"title"},TestComponent=function(a){var b=(0,_extends2.default)({},((0,_objectDestructuringEmpty2.default)(a),a));return(0,_jsxRuntime.jsx)(_ProgressBar.ProgressBar,_objectSpread({},b))};describe("<ProgressBar />",function(){afterEach(function(){return(0,_pure.cleanup)()}),test("Should render a ProgressBar component and have a title",function(){(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread({},componentProps))),expect(_react.screen.getByText(componentProps.title)).toBeInTheDocument()}),test("should have a percentage progress",function(){(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread({chargedProgress:40},componentProps)));var a=_react.screen.getByText("".concat(40,"%"));expect(a).toBeInTheDocument()}),test("Should show empty progress bar",(0,_asyncToGenerator2.default)(_regenerator.default.mark(function a(){var b,c;return _regenerator.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:b="Empty",(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread({emptyHoursContent:b},componentProps))),c=_react.screen.getByTestId("SCBPEmptyHours"),expect(c).toBeInTheDocument();case 4:case"end":return a.stop();}},a)}))),test("Should show progress bar with color red",(0,_asyncToGenerator2.default)(_regenerator.default.mark(function a(){var b,c,d,e;return _regenerator.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:b=25,c=(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread({chargedProgress:b},componentProps))),d=c.getByTestId,e=d("SCBPCharged"),expect(e).toHaveStyle("background: ".concat(_colors.default.colors.error.main));case 4:case"end":return a.stop();}},a)}))),test("Should show progress bar with color yellow",function(){var a=(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread({chargedProgress:40},componentProps))),b=a.getByTestId,c=b("SCBPCharged");expect(c).toHaveStyle("background: ".concat(_colors.default.colors.warning.main))}),test("Should show progress bar with color green",function(){var a=(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread({chargedProgress:82},componentProps))),b=a.getByTestId,c=b("SCBPCharged");expect(c).toHaveStyle("background: #00A500")}),test("Should only show charged bar when to value is 100%",function(){var a=(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread(_objectSpread({},{chargedProgress:100,suggestionProgress:50}),componentProps))),b=a.queryByTestId,c=b("SCBPCharged");expect(c).toBeTruthy();var d=b("SCBPSuggested");expect(d).toBeNull()}),test("Should show progress suggested bar",(0,_asyncToGenerator2.default)(_regenerator.default.mark(function a(){var b,c,d,e,f,g;return _regenerator.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:b=20,c=(0,_react.render)((0,_jsxRuntime.jsx)(TestComponent,_objectSpread({suggestionProgress:b},componentProps))),d=c.getByTestId,e=c.queryByTestId,f=d("SCBPSuggested"),expect(f).toBeInTheDocument(),g=e("SCBPCharged"),expect(g).toBeNull();case 6:case"end":return a.stop();}},a)})))});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,