"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_reactHooks=require("@testing-library/react-hooks"),_react=require("@testing-library/react"),_=require("."),_constants=require("../../constants");function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach(function(c){(0,_defineProperty2.default)(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}var dataMax=3,onConfirm=jest.fn(),onExit=jest.fn(),ignoreNext=!1,resetCounter=!1,mode="vertical",disabled=!1,params={dataMax:3,onConfirm:onConfirm,onExit:onExit,ignoreNext:ignoreNext,resetCounter:resetCounter,mode:mode,disabled:disabled};describe("useArrowCounter()",function(){test("it is verified that pressing ArrowUp behaves as expected",function(){var a=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(params)}),b=a.result,c=a.unmount;expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_DOWN})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(1),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_DOWN})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(2),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_DOWN})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_UP})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(2),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_UP})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(1),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_UP})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_UP})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(2),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),c()}),test("it is verified that pressing ArrowUp with horizontal mode behaves as expected",function(){var a=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(_objectSpread(_objectSpread({},params),{},{mode:"horizontal"}))}),b=a.result,c=a.unmount;expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_RIGHT})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(1),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_RIGHT})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(2),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_RIGHT})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_LEFT})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(2),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_LEFT})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(1),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_LEFT})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_LEFT})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(2),expect(params.onConfirm.mock.calls.length).toEqual(0),expect(params.onExit.mock.calls.length).toEqual(0),c()}),it("it is verified that when pressing Enter, the onConfirm function is the only one that is called",function(){var a=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(params)}),b=a.result,c=a.unmount;(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_ENTER})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(1),expect(params.onExit.mock.calls.length).toEqual(0),c()}),it("It is verified that when pressing Escape, the onCancel function is called",function(){var a=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(params)}),b=a.result,c=a.unmount;(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_ESCAPE})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onExit).toHaveBeenCalled(),c()}),it("It is verified that when pressing TAB, the onCancel function is called",function(){var a=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(params)}),b=a.result,c=a.unmount;(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_TAB})}),expect(b.current).toBeDefined(),expect(b.current).toEqual(0),expect(params.onExit).toHaveBeenCalled(),c()}),it("it is verified that when resetCounter is received and ENTER is pressed, it returns the expected value ",function(){var a=_objectSpread(_objectSpread({},params),{},{resetCounter:!0,onConfirm:jest.fn()}),b=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(a)}),c=b.result,d=b.unmount;expect(c.current).toBeDefined(),expect(c.current).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_DOWN})}),expect(c.current).toBeDefined(),expect(c.current).toEqual(1),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_ENTER})}),expect(c.current).toBeDefined(),expect(c.current).toEqual(0),expect(params.onConfirm.mock.calls.length).toEqual(1),d()}),it("it is verified that when resetCounter is received and ESCAPE is pressed, it returns the expected value  ",function(){var a=_objectSpread(_objectSpread({},params),{},{resetCounter:!0}),b=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(a)}),c=b.result,d=b.unmount;expect(c.current).toBeDefined(),expect(c.current).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_DOWN})}),expect(c.current).toBeDefined(),expect(c.current).toEqual(1),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_ESCAPE})}),expect(c.current).toBeDefined(),expect(c.current).toEqual(0),expect(params.onExit).toHaveBeenCalled(),d()}),it("should disable counter when disabled prop is true ",function(){var a=_objectSpread(_objectSpread({},params),{},{disabled:!0}),b=(0,_reactHooks.renderHook)(function(){return(0,_.useArrowCounter)(a)}),c=b.result,d=b.unmount;expect(c.current).toBeDefined(),expect(c.current).toEqual(0),(0,_reactHooks.act)(function(){_react.fireEvent.keyDown(document.body,{keyCode:_constants.KEY_DOWN})}),expect(c.current).toBeDefined(),expect(c.current).toEqual(0),d()})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,